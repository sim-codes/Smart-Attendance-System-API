<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Presentation</name>
    </assembly>
    <members>
        <member name="M:Presentation.Controllers.AcademicSessionsController.GetAcademicSession(System.Guid)">
            <summary>
            Get a specific academic session by ID
            </summary>
            <param name="id">The ID of the academic session</param>
            <returns>The academic session details</returns>
            <response code="200">Returns the academic session details</response>
            <response code="404">If the academic session is not found</response>
        </member>
        <member name="M:Presentation.Controllers.AcademicSessionsController.CreateAcademicSession(Shared.DataTransferObjects.AcademicSessionForCreationDto)">
            <summary>
            Create a new academic session
            </summary>
            <param name="academicSession">The academic session data for creation</param>
            <returns>The created academic session</returns>
            <response code="201">Returns the newly created academic session</response>
            <response code="400">If the academic session data is invalid</response>
        </member>
        <member name="M:Presentation.Controllers.AcademicSessionsController.DeleteAcademicSession(System.Guid)">
            <summary>
            Delete an academic session by ID
            </summary>
            <param name="id">The ID of the academic session to delete</param>
            <response code="204">If the academic session is successfully deleted</response>
            <response code="404">If the academic session is not found</response>
        </member>
        <member name="M:Presentation.Controllers.AttendanceController.CreateAttendance(System.String,Shared.DataTransferObjects.AttendanceForCreationDto)">
            <summary>
            Create a new attendance record
            </summary>
            <param name="userId">The ID of the user</param>
            <param name="attendance">The attendance data for creation</param>
            <returns>The created attendance record</returns>
            <response code="201">Returns the newly created attendance record</response>
            <response code="400">If the attendance data is invalid</response>
            <response code="404">If the classroom is not found</response>
            <response code="409">If the student is not in the classroom</response>
        </member>
        <member name="M:Presentation.Controllers.AttendanceController.GetAttendance(System.Guid)">
            <summary>
            Get a specific attendance record by ID
            </summary>
            <param name="id">The ID of the attendance record</param>
            <returns>The attendance record details</returns>
            <response code="200">Returns the attendance record details</response>
            <response code="404">If the attendance record is not found</response>
        </member>
        <member name="M:Presentation.Controllers.AttendanceController.GetAttendances">
            <summary>
            Get the list of all attendance records
            </summary>
            <returns>The attendance records list</returns>
            <response code="200">Returns the list of attendance records</response>
        </member>
        <member name="M:Presentation.Controllers.AuthenticationController.RegisterUser(Shared.DataTransferObjects.UserForRegistrationDto)">
            <summary>
            Register a new user
            </summary>
            <param name="userForRegistration">The user data for registration</param>
            <returns>Status code 201 if the user is created successfully</returns>
            <response code="201">Returns status code 201 if the user is created successfully</response>
            <response code="400">If the user data is invalid</response>
        </member>
        <member name="M:Presentation.Controllers.AuthenticationController.AuthenticateUser(Shared.DataTransferObjects.UserForAuthenticationDto)">
            <summary>
            Authenticate a user and generate a token
            </summary>
            <param name="user">The user data for authentication</param>
            <returns>The authentication token and user profile</returns>
            <response code="200">Returns the authentication token and user profile</response>
            <response code="401">If the user credentials are invalid</response>
        </member>
        <member name="M:Presentation.Controllers.AuthenticationController.GeneratePasswordResetToken(Shared.DataTransferObjects.GenerateResetPasswordDto)">
            <summary>
            Generate a password reset token
            </summary>
            <param name="generateResetPassword">The email of the user</param>
            <returns>The password reset token</returns>
            <response code="200">Returns the password reset token</response>
            <response code="404">If the user is not found</response>
        </member>
        <member name="M:Presentation.Controllers.AuthenticationController.ResetPassword(Shared.DataTransferObjects.ResetPasswordDto)">
            <summary>
            Reset the password
            </summary>
            <param name="resetPassword">The password reset data</param>
            <returns>Status code 200 if the password is reset successfully</returns>
            <response code="200">Returns status code 200 if the password is reset successfully</response>
            <response code="400">If the password reset data is invalid</response>
            <response code="404">If the user is not found</response>
        </member>
        <member name="M:Presentation.Controllers.AuthenticationController.ChangePassword(Shared.DataTransferObjects.ChangePasswordDto)">
            <summary>
            Change the password
            </summary>
            <param name="changePasswordDto">The password change data</param>
            <returns>Status code 200 if the password is changed successfully</returns>
            <response code="200">Returns status code 200 if the password is changed successfully</response>
            <response code="400">If the password change data is invalid</response>
            <response code="404">If the user is not found</response>
        </member>
        <member name="M:Presentation.Controllers.ClassroomsController.GetClassrooms(System.Guid)">
            <summary>
            Get the list of all classrooms for a specific faculty
            </summary>
            <param name="facultyId">The ID of the faculty</param>
            <returns>The classroom list</returns>
        </member>
        <member name="M:Presentation.Controllers.ClassroomsController.GetClassroom(System.Guid,System.Guid)">
            <summary>
            Get a specific classroom by ID for a specific faculty
            </summary>
            <param name="facultyId">The ID of the faculty</param>
            <param name="id">The ID of the classroom</param>
            <returns>The classroom details</returns>
        </member>
        <member name="M:Presentation.Controllers.ClassroomsController.CreateClassroom(System.Guid,Shared.DataTransferObjects.ClassroomForCreationDto)">
            <summary>
            Create a new classroom for a specific faculty
            </summary>
            <param name="facultyId">The ID of the faculty</param>
            <param name="classroom">The classroom data for creation</param>
            <returns>The created classroom</returns>
        </member>
        <member name="M:Presentation.Controllers.ClassroomsController.DeleteClassroom(System.Guid,System.Guid)">
            <summary>
            Delete a specific classroom by ID for a specific faculty
            </summary>
            <param name="facultyId">The ID of the faculty</param>
            <param name="id">The ID for the classroom to delete</param>
            <returns>Empty response</returns>
        </member>
        <member name="M:Presentation.Controllers.ClassSchedulesController.GetClassSchedules">
            <summary>
            Get the list of all class schedules
            </summary>
            <returns>The class schedules list</returns>
            <response code="200">Returns the list of class schedules</response>
        </member>
        <member name="M:Presentation.Controllers.ClassSchedulesController.GetClassScheduleById(System.Guid)">
            <summary>
            Get a specific class schedule by ID
            </summary>
            <param name="id">The ID of the class schedule</param>
            <returns>The class schedule details</returns>
            <response code="200">Returns the class schedule details</response>
            <response code="404">If the class schedule is not found</response>
        </member>
        <member name="M:Presentation.Controllers.ClassSchedulesController.CreateClassSchedule(Shared.DataTransferObjects.ClassScheduleForCreationDto)">
            <summary>
            Create a new class schedule
            </summary>
            <param name="classSchedule">The class schedule data for creation</param>
            <returns>The created class schedule</returns>
            <response code="201">Returns the newly created class schedule</response>
            <response code="400">If the class schedule data is invalid</response>
        </member>
        <member name="M:Presentation.Controllers.ClassSchedulesController.UpdateClassSchedule(System.Guid,Shared.DataTransferObjects.ClassScheduleForUpdateDto)">
            <summary>
            Update class schedule by ID
            </summary>
            <param name="Id">The ID of the class schedule</param>
            <param name="classSchedule">The class schedule data for update</param>
            <returns>Status code 204 if the class schedule is updated successfully</returns>
            <response code="204">Returns status code 204 if the class schedule is updated successfully</response>
        </member>
        <member name="M:Presentation.Controllers.ClassSchedulesController.DeleteClassSchedule(System.Guid)">
            <summary>
            Delete a specific class scheddule by ID
            </summary>
            <param name="id">The ID for the class schedule to delete</param>
            <returns>Empty response</returns>
        </member>
        <member name="M:Presentation.Controllers.CoursesController.GetAllDepartmentCourses(System.Guid,Shared.RequestFeatures.CourseParameters)">
            <summary>
            Get the list of all courses for a specific department
            </summary>
            <param name="departmentId">The ID of the department</param>
            <param name="courseParameters">The course parameters</param>
            <returns>The courses list</returns>
            <response code="200">Returns the list of courses</response>
        </member>
        <member name="M:Presentation.Controllers.CoursesController.GetCourseById(System.Guid,System.Guid)">
            <summary>
            Get a specific course by ID for a specific department
            </summary>
            <param name="departmentId">The ID of the department</param>
            <param name="id">The ID of the course</param>
            <returns>The course details</returns>
            <response code="200">Returns the course details</response>
            <response code="404">If the course is not found</response>
        </member>
        <member name="M:Presentation.Controllers.CoursesController.CreateCourseForDepartment(System.Guid,Shared.DataTransferObjects.CourseForCreationDto)">
            <summary>
            Create a new course for a specific department
            </summary>
            <param name="departmentId">The ID of the department</param>
            <param name="course">The course data for creation</param>
            <returns>The created course</returns>
            <response code="201">Returns the newly created course</response>
            <response code="400">If the course data is invalid</response>
        </member>
        <member name="M:Presentation.Controllers.CoursesController.DeleteCourseForDepartment(System.Guid,System.Guid)">
            <summary>
            Delete a specific course by ID
            </summary>
            <param name="departmentId">The ID for the department to delete course for</param>
            <param name="id">The ID for the course to delete</param>
            <returns>Empty response</returns>
        </member>
        <member name="M:Presentation.Controllers.DepartmentsController.GetDepartments(System.Guid)">
            <summary>
            Get the list of all departments for a specific faculty
            </summary>
            <param name="facultyId">The ID of the faculty</param>
            <returns>The departments list</returns>
        </member>
        <member name="M:Presentation.Controllers.DepartmentsController.GetDepartment(System.Guid,System.Guid)">
            <summary>
            Get a specific department by ID for a specific faculty
            </summary>
            <param name="facultyId">The ID of the faculty</param>
            <param name="id">The ID of the department</param>
            <returns>The department details</returns>
        </member>
        <member name="M:Presentation.Controllers.DepartmentsController.CreateDepartment(System.Guid,Shared.DataTransferObjects.DepartmentForCreationDto)">
            <summary>
            Create a new department for a specific faculty
            </summary>
            <param name="facultyId">The ID of the faculty</param>
            <param name="department">The department data for creation</param>
            <returns>The created department</returns>
        </member>
        <member name="M:Presentation.Controllers.FacultiesController.GetFaculties">
            <summary>
            Get the list of all faculties
            </summary>
            <returns>The faculties list</returns>
        </member>
        <member name="M:Presentation.Controllers.FacultiesController.GetFaculty(System.Guid)">
            <summary>
            Get a specific faculty by ID
            </summary>
            <param name="id">The ID of the faculty</param>
            <returns>The faculty details</returns>
        </member>
        <member name="M:Presentation.Controllers.FacultiesController.CreateFaculty(Shared.DataTransferObjects.FacultyForCreationDto)">
            <summary>
            Create a new faculty
            </summary>
            <param name="faculty">The faculty data for creation</param>
            <returns>The created faculty</returns>
            <response code="201">Returns the newly created item</response>
            <response code="400">If the item is null</response>
            <response code="422">If the model is invalid</response>
        </member>
        <member name="M:Presentation.Controllers.LecturersController.GetLecturers(Shared.RequestFeatures.LecturerParameters)">
            <summary>
            Get the list of all lecturers
            </summary>
            <param name="lecturerParameters">The lecturer parameters</param>
            <returns>The lecturer list</returns>
            <response code="200">Returns the list of lectuers</response>
        </member>
        <member name="M:Presentation.Controllers.LecturersController.GetLecturer(System.String)">
            <summary>
            Get a specific lecturer by User ID
            </summary>
            <param name="userId">The User ID of the lecturer</param>
            <returns>The student details</returns>
            <response code="200">Returns the lecturer details</response>
            <response code="404">If the lecturer is not found</response>
        </member>
        <member name="M:Presentation.Controllers.LecturersController.CreateStudent(System.String,Shared.DataTransferObjects.LecturerForCreationDto)">
            <summary>
            Create a new lecturer
            </summary>
            <param name="userId">The User ID of the lecturer</param>
            <param name="lecturer">The lecturer data for creation</param>
            <returns>The created lecturer</returns>
            <response code="201">Returns the newly created lecturer</response>
            <response code="400">If the leturer data is invalid</response>
        </member>
        <member name="M:Presentation.Controllers.LevelsController.GetAllLevels">
            <summary>
            Get the list of all levels
            </summary>
            <returns>The levels list</returns>
            <response code="200">Returns the list of levels</response>
        </member>
        <member name="M:Presentation.Controllers.LevelsController.GetLevelById(System.Guid)">
            <summary>
            Get a specific level by ID
            </summary>
            <param name="id">The ID of the level</param>
            <returns>The level details</returns>
            <response code="200">Returns the level details</response>
            <response code="404">If the level is not found</response>
        </member>
        <member name="M:Presentation.Controllers.LevelsController.CreateLevel(Shared.DataTransferObjects.LevelForCreationDto)">
            <summary>
            Create a new level
            </summary>
            <param name="level">The level data for creation</param>
            <returns>The created level</returns>
            <response code="201">Returns the newly created level</response>
            <response code="400">If the level data is invalid</response>
        </member>
        <member name="M:Presentation.Controllers.StudentsController.GetAllStudents(Shared.RequestFeatures.StudentParameters)">
            <summary>
            Get the list of all students
            </summary>
            <param name="studentParameters">The student parameters</param>
            <returns>The students list</returns>
            <response code="200">Returns the list of students</response>
        </member>
        <member name="M:Presentation.Controllers.StudentsController.GetStudent(System.String)">
            <summary>
            Get a specific student by User ID
            </summary>
            <param name="userId">The User ID of the student</param>
            <returns>The student details</returns>
            <response code="200">Returns the student details</response>
            <response code="404">If the student is not found</response>
        </member>
        <member name="M:Presentation.Controllers.StudentsController.CreateStudent(System.String,Shared.DataTransferObjects.StudentForCreationDto)">
            <summary>
            Create a new student
            </summary>
            <param name="userId">The User ID of the student</param>
            <param name="student">The student data for creation</param>
            <returns>The created student</returns>
            <response code="201">Returns the newly created student</response>
            <response code="400">If the student data is invalid</response>
        </member>
    </members>
</doc>
